name: Build and Deploy to EC2

on:
  push:
    branches:
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Clonar el repositorio
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configurar Docker
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 3. Construir la imagen Docker
    - name: Build Docker image
      run: |
        docker build -t tourya-api:latest .

    # 4. Subir la imagen al registro de contenedores
    - name: Push Docker image to Docker Hub
      run: |
        docker tag tourya-api:latest ${{ secrets.DOCKER_USERNAME }}/tourya-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/tourya-api:latest

    # 5. Desplegar en la máquina EC2
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Descargar la última imagen desde Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/tourya-api:latest
          
          # Detener y eliminar el contenedor existente (si lo hay)
          docker stop tourya-api || true
          docker rm tourya-api || true
          
          # Ejecutar el nuevo contenedor
          docker run -d --name tourya-api -p 8088:8088 \
            --env DB_USER=${{ secrets.DB_USER }} \
            --env DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --env DB_HOST=${{ secrets.DB_HOST }} \
            --env DB_PORT=${{ secrets.DB_PORT }} \
            ${{ secrets.DOCKER_USERNAME }}/tourya-api:latest